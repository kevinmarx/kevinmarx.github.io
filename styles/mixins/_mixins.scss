// Border helper
@mixin border($border-color) { border: 1px solid $border-color; }

// Font size Mixin to include px size and rem
@mixin font-size($size, $is-important: false) {
  @if $is-important {
    font-size: $size + px !important;
    font-size: ($size / 10) + rem !important;
  } @else {
    font-size: $size + px;
    font-size: ($size / 10) + rem;
  }
}

@mixin use-rems($property, $size1, $size2:null, $size3:null, $size4:null) {
  @if ($size4) {
    #{$property}: $size1+px $size2+px $size3+px $size4+px;
    #{$property}: ($size1/10)+rem ($size2/10)+rem ($size3/10)+rem ($size4/10)+rem;
  } @else if ($size3) {
    #{$property}: $size1+px $size2+px $size3+px;
    #{$property}: ($size1/10)+rem ($size2/10)+rem ($size3/10)+rem;
  } @else if ($size2) {
    #{$property}: $size1+px $size2+px;
    #{$property}: ($size1/10)+rem ($size2/10)+rem;
  } @else {
    #{$property}: $size1+px;
    #{$property}: ($size1/10)+rem;
  }
}

// Default Font Stack
@mixin default-font-family {
  font-family: "proxima-nova", "Helvetica Neue", Verdana, sans-serif;
}

// Create CSS Triangles in a Breeze
@mixin cssTriangle($triangleSize, $triangleColor, $triangleDirection) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: solid $triangleSize;
  @if ($triangleDirection == down) {
    border-color: $triangleColor transparent transparent transparent;
  }
  @if ($triangleDirection == up) {
    border-color: transparent transparent $triangleColor transparent;
  }
  @if ($triangleDirection == right) {
    border-color: transparent transparent transparent $triangleColor;
  }
  @if ($triangleDirection == left) {
    border-color: transparent $triangleColor transparent transparent;
  }
  // .example { @include css-triangle(5px, #fff, bottom); }
}

// Stripes!
@mixin stripes($one, $two) {
  background-color: $one;
  // doing this by hand because support for repeating gradients won't land in compass until 0.13
  background-image:     -ms-repeating-linear-gradient(-45deg, transparent, transparent 10px, $two 10px, $two 20px);
  background-image:    -moz-repeating-linear-gradient(-45deg, transparent, transparent 10px, $two 10px, $two 20px);
  background-image: -webkit-repeating-linear-gradient(-45deg, transparent, transparent 10px, $two 10px, $two 20px);
  background-image:         repeating-linear-gradient(-45deg, transparent, transparent 10px, $two 10px, $two 20px);
}

// CSS Animations
@mixin keyframes($name:"") {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-o-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin animation($name, $duration, $timing-function, $delay:"", $iteration-count:"", $direction:"") {
  animation: $name $duration $timing-function #{$delay} #{$iteration-count} #{$direction};
  -moz-animation: $name $duration $timing-function #{$delay} #{$iteration-count} #{$direction};
  -webkit-animation: $name $duration $timing-function #{$delay} #{$iteration-count} #{$direction};
  -o-animation: $name $duration $timing-function #{$delay} #{$iteration-count} #{$direction};
  -ms-animation: $name $duration $timing-function #{$delay} #{$iteration-count} #{$direction};
}

@mixin transition($property, $duration, $timing-function, $delay:"") {
  transition: $property $duration $timing-function #{$delay};
  -moz-transition: $property $duration $timing-function #{$delay};
  -webkit-transition: $property $duration $timing-function #{$delay};
  -o-transition: $property $duration $timing-function #{$delay};
  -ms-transition: $property $duration $timing-function #{$delay};
}

// No text-selection / highlighting

@mixin no-selection(){
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

// Notification borders
// $color1 = border
// $color2 = box-shadow
// $modifier = specific class styles

@mixin notify-border($color1, $color2, $modifier:none) {
  @if $modifier == drop {
    border-top: 1px solid $color1;
    border-left: 1px solid $color1;
    box-shadow: inset 0 0 0 3px $color2;
  }
  @else if $modifier == above {
    border-bottom: 1px solid $color1;
    border-right: 1px solid $color1;
    box-shadow: inset 0 0 0 3px $color2;
  }
  @else if $modifier == row {
    border-top: 1px double $color1;
    border-bottom: 1px double $color1;

    td {
      box-shadow: inset 0 -6px 0px -3px $color2, inset 0 6px 0px -2px $color2;

      &:first-child { box-shadow: inset 6px 0 0 -3px $color2, inset 0 -6px 0px -3px $color2, inset 0 6px 0px -2px $color2; }
      &:last-child { box-shadow: inset -6px 0 0 -3px $color2, inset 0 -6px 0px -3px $color2, inset 0 6px 0px -2px $color2; }
    }  
  }
  @else if $modifier == none { border: 1px solid $color1; box-shadow: inset 0 0 0 3px $color2; }
  @else { border: #999; }
}

// Rotation

@mixin rotation($degrees) {
  -webkit-transform: rotate($degrees+deg);
  -moz-transform: rotate($degrees+deg);
  -ms-transform: rotate($degrees+deg);
  -o-transform: rotate($degrees+deg);

  @if $degrees == 0 { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=0); }
  @else if $degrees == 90 { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1); }
  @else if $degrees == 180 { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2); }
  @else if $degrees == 270 { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3); }
  @else { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=0); }
}

